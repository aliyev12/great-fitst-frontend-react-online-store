{"version":3,"file":"static/webpack/static/development/pages/update.js.ed90a4bfc45717cd23d4.hot-update.js","sources":["webpack:///./components/UpdateItem.js"],"sourcesContent":["import React, {Component} from 'react';\nimport {Mutation, Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport Router from 'next/router';\n\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!) {\n        item(where: { id: $id }) {\n            id\n            title\n            description\n            price\n        }\n    }\n`;\n\nconst UPDATE_ITEM_MUTATION = gql`\n  mutation UPDATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    # $image: String\n    # $largeImage: String\n  ) {\n    updateItem(\n      title: $title\n      description: $description\n      price: $price\n    #   image: $image\n    #   largeImage: $largeImage\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nclass UpdateItem extends Component {\n  state = {\n    formData: {},\n    imageLoading: false,\n  };\n\n  handleChange = e => {\n    const {name, type, value} = e.target;\n    const val = type === 'number' ? parseFloat (value) : value;\n    const newFormData = {\n      ...this.state.formData,\n      [name]: val,\n    };\n    this.setState ({formData: newFormData});\n  };\n\n  updateItem = async (e, updateItemMutation) => {\n    // Stop the form from submitting\n    // Before submitting, check if image is done uploading because there could\n    //  be a little bit of time when someone uploads a file then immediately\n    // hits enter then its going to send the data.\n    e.preventDefault ();\n    if (!this.state.imageLoading) {\n      // Call the mutation\n      const res = await updateItemMutation ({\n          variables: {\n              id: this.props.id,\n              ...this.state.formData\n          }\n      });\n      console.log('updated');\n      // Change item to the single item page\n    //   Router.push ({\n    //     pathname: '/item',\n    //     query: {id: res.data.updateItem.id},\n    //   });\n    }\n  }\n\n  //   uploadFile = async e => {\n  //     this.setState ({imageLoading: true});\n  //     const files = e.target.files;\n  //     const data = new FormData ();\n  //     data.append ('file', files[0]);\n  //     data.append ('upload_preset', 'greatfits');\n\n  //     const res = await fetch (\n  //       `https://api.cloudinary.com/v1_1/greatfits/image/upload`,\n  //       {\n  //         method: 'POST',\n  //         body: data,\n  //       }\n  //     );\n  //     const file = await res.json ();\n  //     const newFormData = {\n  //       ...this.state.formData,\n  //       image: file.secure_url,\n  //       largeImage: file.eager[0].secure_url,\n  //     };\n  //     this.setState ({\n  //         formData: newFormData,\n  //         imageLoading: false\n  //     });\n  //   };\n\n  render () {\n    return (\n      <Query\n        query={SINGLE_ITEM_QUERY}\n        variables={{\n          id: this.props.id,\n        }}\n      >\n        {({data, loading}) => {\n          if (loading) return <p>Loading...</p>;\n          if(!data.item) return <p>No Item Found for ID {this.props.id}</p>\n          return (\n            <Mutation\n              mutation={UPDATE_ITEM_MUTATION}\n              variables={this.state.formData}\n            >\n              {(updateItem, {loading, error}) => (\n                <Form onSubmit={e => this.updateItem(e, updateItem)}\n                >\n                  <Error error={error} />\n                  <fieldset disabled={loading} aria-busy={loading}>\n                    {/* <label htmlFor=\"file\">\n                Image\n                <input\n                  onChange={this.uploadFile}\n                  type=\"file\"\n                  id=\"file\"\n                  name=\"file\"\n                  placeholder=\"Upload an image\"\n                  required\n                />\n                {this.state.formData.image && <img src={this.state.formData.image} alt={'Upload preview of ' + this.state.formData.title} width=\"200\" />}\n              </label> */}\n\n                    <label htmlFor=\"title\">\n                      Title\n                      <input\n                        defaultValue={data.item.title}\n                        onChange={this.handleChange}\n                        type=\"text\"\n                        id=\"title\"\n                        name=\"title\"\n                        placeholder=\"title\"\n                        required\n                      />\n                    </label>\n\n                    <label htmlFor=\"price\">\n                      Price\n                      <input\n                        defaultValue={data.item.price}\n                        onChange={this.handleChange}\n                        type=\"number\"\n                        id=\"price\"\n                        name=\"price\"\n                        placeholder=\"Price\"\n                        required\n                      />\n                    </label>\n\n                    <label htmlFor=\"description\">\n                      Description\n                      <textarea\n                        defaultValue={data.item.description}\n                        onChange={this.handleChange}\n                        name=\"description\"\n                        id=\"description\"\n                        placeholder=\"Enter a description\"\n                        required\n                      />\n                    </label>\n\n                    <button type=\"submit\">Save Changes</button>\n                  </fieldset>\n                </Form>\n              )}\n            </Mutation>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UpdateItem;\nexport {UPDATE_ITEM_MUTATION};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAsBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AASA;AACA;AADA;AADA;AACA;AATA;AAQA;AAMA;AAEA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxDA;AA8DA;AAGA;;;;AAlJA;AACA;AAoJA;;;;;A","sourceRoot":""}